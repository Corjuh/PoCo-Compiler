package com.poco.PoCoCompiler;


import com.poco.PoCoParser.PoCoParser;
import com.poco.PoCoParser.PoCoParserBaseVisitor;
import com.poco.Extractor.Closure;
import org.antlr.v4.runtime.misc.NotNull;

import java.io.PrintWriter;
import java.sql.SQLSyntaxErrorException;
import java.util.Stack;

import com.poco.Extractor.VarTypeVal;
import sun.jvm.hotspot.debugger.posix.elf.ELFSectionHeader;

/**
 * Generates the Java code to create a PoCoPolicy object representing
 * the parsed PoCo policy.
 */
public class PolicyVisitor extends PoCoParserBaseVisitor<Void> {
    private final int indentLevel;
    private final PrintWriter out;

    private int executionNum;
    private Stack<String> executionNames;

    private int exchangeNum;
    private String currentExchange;
    private boolean isReturnValue;

    private int matchsNum;
    private Stack<String> matchsNames;

    private int matchNum;
    private String currentMatch;

    private Closure closure;

    private int sreNum;


    private boolean matchRHS = false;
    private boolean hasAsterisk = false;
    private boolean hasPlus = false;

    private boolean isSre = false;
    private boolean isSrePos = false;
    private String currentSre;

    private boolean isIre    = false;
    private boolean isAction = false;
    private boolean isResult = false;
    private boolean isResultMatch=false;

    /**
     * Constructor
     *
     * @param out         output stream to write to (a PrintWriter-wrapped Java or AspectJ file)
     * @param indentLevel base indent level for all code generated by PolicyVisitor
     */
    public PolicyVisitor(PrintWriter out, int indentLevel, Closure closure1) {
        this.out = out;
        this.indentLevel = indentLevel;

        // Initialize execution data structures
        this.executionNum = 0;
        this.executionNames = new Stack<>();

        // Initialize exchange data structures
        this.exchangeNum = 0;
        this.currentExchange = null;
        this.isReturnValue = false;

        // Initialize Matchs data structures
        this.matchsNum = 0;
        this.matchsNames = new Stack<>();

        // Initialize Match data structures
        this.matchNum = 0;
        this.currentMatch = null;

        // Initialize SRE data structures
        this.sreNum = 0;
        this.closure = closure1;
    }

    /**
     * Outputs one line of Java/AspectJ code to the out object (always ends in newline).
     *
     * @param indent indent level of current line (relative to the existing indent level)
     * @param text   code to write out (printf style formatting used)
     * @param args   printf-style arguments
     */
    private void outLine(int indent, String text, Object... args) {
        outPartial(indent, text, args);
        outPartial(-1, "\n");
    }

    /**
     * Outputs Java/AspectJ code without appending newline. Use a negative indent value to
     * disable indents.
     *
     * @param indent indent level (relative to existing indent level), or negative to disable indents
     * @param text   code to write out (printf style formatting used)
     * @param args   printf-style arguments
     */
    private void outPartial(int indent, String text, Object... args) {
        if (indent >= 0) {
            int trueIndent = (indent + indentLevel) * 4;

            for (int i = 0; i < trueIndent; i++) {
                out.format(" ");
            }
        }
        out.format(text, args);
    }

    /**
     * Generates code for class representing a PoCo policy. This is the first visit method called.
     *
     * @param ctx
     * @return
     */
    @Override
    public Void visitPocopol(@NotNull PoCoParser.PocopolContext ctx) {
        String policyName = ctx.id().getText();

        outLine(0, "class %s extends Policy {", policyName);
        outLine(1, "public %s() {", policyName);
        outLine(2, "try {");
        executionNames.push("ROOT");
        visitChildren(ctx);
        executionNames.pop();
        outLine(2, "} catch (PoCoException pex) {");
        outLine(3, "System.out.println(pex.getMessage());");
        outLine(3, "pex.printStackTrace();");
        outLine(3, "System.exit(-1);");
        outLine(2, "}");
        outLine(1, "}");
        outLine(0, "}");

        outLine(0, "%s policy1 = new %s();", policyName, policyName);
        outLine(0, "root.setChild(policy1);");

        return null;
    }

    @Override
    public Void visitParamlist(@NotNull PoCoParser.ParamlistContext ctx) {
        // TODO: Support actual policy parameters (as references to policy objects)

        visitChildren(ctx);

        return null;
    }

    @Override
    public Void visitExecution(@NotNull PoCoParser.ExecutionContext ctx) {
        // TODO: Support non-sequential executions
        if (ctx.exch() == null) {
            // Get modifier of execution (i.e. + or *), if any
            if (ctx.ASTERISK() != null)
                hasAsterisk = true;
            else if (ctx.PLUS() != null)
                hasPlus = true;
            else {
                hasAsterisk = false;
                hasPlus = false;
            }
            visitChildren(ctx);
        } else if (ctx.exch() != null) {
            String executionName = "exec" + executionNum++;
            String parentExecutionName = executionNames.peek();
            String modifier = "none";

            // Get modifier of execution (i.e. + or *), if any
            if (hasAsterisk)
                modifier = "*";
            else if (hasPlus)
                modifier = "+";


            // This execution becomes the parent of all children
            executionNames.push(executionName);

            // CODE GENERATION:
            // Declare new execution variable and initialize it
            outLine(3, "SequentialExecution %s = new SequentialExecution(\"%s\");", executionName, modifier);

            // Visit children, who will add themselves as children to this execution.
            visitChildren(ctx);

            // Add this execution as a child to the parent
            /*if (parentExecutionName == "ROOT") {
                outLine(3, "rootExecution = %s;", executionName);
            } else {
                outLine(3, "%s.addChild(%s);", parentExecutionName, executionName);
            }*/
            outLine(3, "rootExecution.addChild(%s);", executionName);

            // All children have been visited. Remove from stack.
            executionNames.pop();
        } else {
            // Empty execution wrapping an exchange object
            visitChildren(ctx);
        }

        return null;
    }

    @Override
    public Void visitExch(@NotNull PoCoParser.ExchContext ctx) {
        // Create Exchange object
        String exchangeName = "exch" + exchangeNum++;
        // Visit children to flesh out the exchange object
        currentExchange = exchangeName;

        outLine(3, "Exchange %s = new Exchange();", exchangeName);

        // The code for the match object is not generated here unless the match portion is a wildcard
        boolean isWildcardMatch = (ctx.INPUTWILD() != null);
        if (isWildcardMatch) {
            //String matchName = "match" + matchNum++;
            //outLine(3, "Match %s = new Match(%s);", matchName, "\"%\"");
            //outLine(3, "%s.addMatcher(%s);", exchangeName, matchName);
            matchRHS = true;
            visitSre(ctx.sre());
            matchRHS = false;
        }
        else if(ctx.matchs()!= null) {
            String matchsName = "matchs" + matchsNum++;
            // Create matchs object
            outLine(3, "Matchs %s = new Matchs();", matchsName);
            // Visit children
            matchsNames.push(matchsName);
            visitMatchs(ctx.matchs());
            outLine(3, "%s.addMatcher(%s);", currentExchange, matchsName);
            matchsNames.pop();
        }

        // Let the child SRE know it's a return value, so that it attaches itself to this exchange
        isReturnValue = true;
        visitSre(ctx.sre());
        isReturnValue = false;

        currentExchange = null;

        // Add Exchange to containing execution
        outLine(3, "%s.addChild(%s);", executionNames.peek(), exchangeName);

        return null;
    }

    @Override
    public Void visitMatchs(@NotNull PoCoParser.MatchsContext ctx) {
        // If the child node is a Match object, this Matchs object is unnecessary
        boolean hasBooluop = (ctx.BOOLUOP() != null);
        boolean hasAnd     = false;
        boolean hasOr      = false;
        if(ctx.BOOLBOP()  != null) {
            if(ctx.BOOLBOP().getText().equals("||"))
                 hasOr     = true;
            else
                 hasAnd    = true;
        }
        boolean hasMatch   = (ctx.match() != null);
        if (!hasMatch) {
            if(hasBooluop)
                outLine(3, "%s.setNOT(true);", matchsNames.peek());
            if(hasAnd)
                outLine(3, "%s.setAND(true);", matchsNames.peek());
            else if(hasOr)
                outLine(3, "%s.setOR(true);", matchsNames.peek());
            visitChildren(ctx);
        } else {
            // This matchs simply wraps a match object. No need to create a matchs object
            visitChildren(ctx);
        }

        return null;
    }

    @Override
    public Void visitMatch(@NotNull PoCoParser.MatchContext ctx) {
        // Create match object
        String matchName = "match" + matchNum++;
        outLine(3, "Match %s = new Match();", matchName);
        // TODO: Handle case when something other than an ire is in a match object
        // Visit children
        currentMatch = matchName;
        visitChildren(ctx);
        currentMatch = null;

        // Add to parent
        if (matchsNames.empty()) {
            // Add match object to parent exchange
            outLine(3, "%s.addMatcher(%s);", currentExchange, matchName);
        } else {
            // Add match object to parent matchs
            outLine(3, "%s.addChild(%s);", matchsNames.peek(), matchName);
        }
        return null;
    }

    @Override
    public Void visitIre(@NotNull PoCoParser.IreContext ctx) {
        isIre = true;
        if (ctx.ACTION() != null) {
            isAction = true;
            isResult = false;
            visitRe(ctx.re(0));
        }else {
            isAction = false;  //is result
            isResult = true;
            visitRe(ctx.re(0));
            isResultMatch = true;
            visitRe(ctx.re(1));
            isResultMatch = false;
        }
        isIre = false;
        return null;
    }

    @Override
    public Void visitSre(@NotNull PoCoParser.SreContext ctx) {
        // TODO: Support SREs existing outside of the "return" part of an exchange
        if (matchRHS == true) {
            if (ctx.re() != null) {
                visitRe(ctx.re());
            } else if (ctx.qid() != null) {
                String str = loadFromClosure(ctx.qid().getText());
                if (str == null)
                    str = ctx.qid().getText();
                String matchName = "match" + matchNum++;
                outLine(3, "Match %s = new Match(%s);", matchName, str);
                outLine(3, "%s.addMatcher(%s);", currentExchange, matchName);
            }
        } else {
            if (ctx.NEUTRAL() != null) {
                String sreName = "sre" + sreNum++;
                outLine(3, "SRE %s = new SRE(null, null);", sreName);
                if (isReturnValue) {
                    outLine(3, "%s.setSRE(%s);", currentExchange, sreName);
                }
            } else if (ctx.PLUS() != null | ctx.MINUS() != null) {
                String sreName = "sre" + sreNum++;
                currentSre = sreName;
                isSre = true;
                isSrePos = (ctx.PLUS() != null);
                visitRe(ctx.re());
                isSre = false;
                if (isReturnValue) {
                    outLine(3, "%s.setSRE(%s);", currentExchange, sreName);
                }
            } else {
                //will need add other cases, $qid, $qid()....
            }
        }
        return null;
    }

    @Override
    public Void visitVardecl(@NotNull PoCoParser.VardeclContext ctx) {
        if (ctx.id() != null) {
            VarTypeVal varTyCal;
            if (ctx.RETYPE() != null) {
                varTyCal = new VarTypeVal(VarTypeVal.ClosureType.RE_TYPE, null, null);
            } else {
                varTyCal = new VarTypeVal(VarTypeVal.ClosureType.SRE_TYPE, null, null);
            }
            closure.addClosure(ctx.id().getText(), varTyCal);
        }

        return null;
    }

    @Override
    public Void visitRe(@NotNull PoCoParser.ReContext ctx) {
        if (matchRHS == true) {
            String matchName = "match" + matchNum++;
            outLine(3, "Match %s = new Match(%s);", matchName, ctx.getText());
            outLine(3, "%s.addMatcher(%s);", currentExchange, matchName);
        } else {
            if (ctx.rewild() != null) {
                if(isResult)
                    if(isResultMatch)
                        outLine(3, "%s.setResultMatchStr(*);", currentMatch);


            } else if (ctx.AT() != null) {
                if (ctx.id() != null) {
                    if (closure != null) {
                        VarTypeVal val = closure.loadClosure(ctx.id().getText());
                        val.setReContext(ctx.re(0));
                        closure.updateClosure(ctx.id().getText(), val);
                    }
                } else
                    throw new NullPointerException("No such var exist.");
                visitRe(ctx.re(0));
            } else {
                String content;
                if (ctx.DOLLAR() != null) {
                    content = loadFromClosure(ctx.qid().getText());
                    if (content == null)
                        content = ctx.qid().getText();
                } else
                    content = ctx.getText();
                if (isSre) {
                    if (isSrePos)
                        outLine(3, "SRE %s = new SRE(\"%s\", null);", currentSre, content);
                    else
                        outLine(3, "SRE %s = new SRE(null, \"%s\");", currentSre, content);
                } else if (isIre) {
                    if (isAction) {
                        outLine(3, "%s.setAction(true);", currentMatch);
                        outLine(3, "%s.setResult(false);", currentMatch);
                        outLine(3, "%s.setMatchString(\"%s\");", currentMatch, content);
                    } else {
                        outLine(3, "%s.setAction(false);", currentMatch);
                        outLine(3, "%s.setResult(true);", currentMatch);
                        if(isResultMatch)
                            outLine(3, "%s.setResultMatchStr(%s);", currentMatch,content);
                        else
                            outLine(3, "%s.setMatchString(%s);", currentMatch, content);
                    }
                }

            }
        }
        return null;
    }

    private static String scrubString(String input) {
        return input.replaceAll("(%|\\$[a-zA-Z0-9\\.\\-_]+)", "");
    }

    public String loadFromClosure(String varName) {
        String strval = null;
        if (closure != null)
            if (closure.loadClosure(varName) != null)
                if (closure.loadClosure(varName).getVarType() == VarTypeVal.ClosureType.RE_TYPE &&
                        closure.loadClosure(varName).getReContext() != null)
                    strval = closure.loadClosure(varName).getReContext().getText();
                else if (closure.loadClosure(varName).getVarType() == VarTypeVal.ClosureType.SRE_TYPE &&
                        closure.loadClosure(varName).getSreContext() != null)
                    strval = closure.loadClosure(varName).getSreContext().getText();

        return strval;
    }
}
